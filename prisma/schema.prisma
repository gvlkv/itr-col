// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Comment {
  id          Int      @id @default(autoincrement())
  item        Item     @relation(fields: [itemId], references: [id])
  itemId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  date        DateTime
  textMd      String   @db.Text
}

model Tag {
  name  String @id
  items Item[]
}

model Item {
  id           Int        @id @default(autoincrement())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  comments     Comment[]
  tags         Tag[]
  likedBy      User[]

  boolValue1 Boolean?
  boolValue2 Boolean?
  boolValue3 Boolean?
  dateValue1 DateTime?
  dateValue2 DateTime?
  dateValue3 DateTime?
  intValue1  Int?
  intValue2  Int?
  intValue3  Int?
  strValue1  String?   @db.Text
  strValue2  String?   @db.Text
  strValue3  String?   @db.Text
  textValue1 String?   @db.Text
  textValue2 String?   @db.Text
  textValue3 String?   @db.Text
}

model Topic {
  id          Int          @id @default(autoincrement())
  name        String
  collections Collection[]
}

model Collection {
  id            Int      @id @default(autoincrement())
  name          String
  descriptionMd String   @db.Text
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     User     @relation(fields: [createdById], references: [id])
  createdById   String
  topic         Topic    @relation(fields: [topicId], references: [id])
  topicId       Int
  items         Item[]

  optBoolEnabled1 Boolean @default(false)
  optBoolEnabled2 Boolean @default(false)
  optBoolEnabled3 Boolean @default(false)
  optBoolLabel1   String?
  optBoolLabel2   String?
  optBoolLabel3   String?
  optDateEnabled1 Boolean @default(false)
  optDateEnabled2 Boolean @default(false)
  optDateEnabled3 Boolean @default(false)
  optDateLabel1   String?
  optDateLabel2   String?
  optDateLabel3   String?
  optIntEnabled1  Boolean @default(false)
  optIntEnabled2  Boolean @default(false)
  optIntEnabled3  Boolean @default(false)
  optIntLabel1    String?
  optIntLabel2    String?
  optIntLabel3    String?
  optStrEnabled1  Boolean @default(false)
  optStrEnabled2  Boolean @default(false)
  optStrEnabled3  Boolean @default(false)
  optStrLabel1    String?
  optStrLabel2    String?
  optStrLabel3    String?
  optTextEnabled1 Boolean @default(false)
  optTextEnabled2 Boolean @default(false)
  optTextEnabled3 Boolean @default(false)
  optTextLabel1   String?
  optTextLabel2   String?
  optTextLabel3   String?

  @@index([name])
}

enum Role {
  USER
  ADMIN
}

enum Language {
  ENGLISH
  RUSSIAN
}

enum Theme {
  LIGHT
  DARK
}

model User {
  role        Role         @default(USER)
  lang        Language     @default(ENGLISH)
  theme       Theme        @default(LIGHT)
  collections Collection[]
  comments    Comment[]
  likedItems  Item[]

  // Necessary for Next auth
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
